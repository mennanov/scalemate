load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("@bazel_gomock//:gomock.bzl", "gomock")

go_library(
    name = "go_default_library",
    srcs = [
        "auth.go",
        "event_handlers.go",
        "get_job.go",
        "get_task.go",
        "list_cpu_models.go",
        "list_disk_models.go",
        "list_gpu_models.go",
        "list_jobs.go",
        "list_memory_models.go",
        "list_tasks.go",
        "receive_tasks.go",
        "run_job.go",
        "server.go",
    ],
    data = [
        "//cert:cert",
    ],
    importpath = "github.com/mennanov/scalemate/scheduler/server",
    visibility = ["//visibility:public"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/events:go_default_library",
        "//shared/events/events_proto:go_default_library",
        "//shared/middleware:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_gogo_protobuf//proto:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//auth:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//logging/logrus:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//logging/logrus/ctxlogrus:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//recovery:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//validator:go_default_library",
        "@com_github_jinzhu_gorm//:go_default_library",
        "@com_github_jinzhu_gorm//dialects/postgres:go_default_library",
        "@com_github_pkg_errors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_github_streadway_amqp//:go_default_library",
        "@io_bazel_rules_go//proto/wkt:empty_go_proto",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

gomock(
    name = "accounts_proto_mock",
    out = "accounts_proto_mock_test.go",
    interfaces = ["AccountsClient"],
    library = "//accounts/accounts_proto:accounts_go_proto",
    package = "server_test",
)

go_test(
    name = "go_default_test",
    srcs = [
        "accounts_proto_mock_test.go",
        "event_handlers_test.go",
        "get_job_test.go",
        "get_task_test.go",
        "list_cpu_models_test.go",
        "list_disk_models_test.go",
        "list_gpu_models_test.go",
        "list_jobs_test.go",
        "list_memory_models_test.go",
        "list_tasks_test.go",
        "receive_tasks_test.go",
        "run_job_test.go",
        "server_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//scheduler/migrations:go_default_library",
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/events:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_dgrijalva_jwt_go//:go_default_library",
        "@com_github_golang_mock//gomock:go_default_library",
        "@com_github_google_uuid//:go_default_library",
        "@com_github_mennanov_fieldmask_utils//:go_default_library",
        "@com_github_stretchr_testify//suite:go_default_library",
        "@in_gopkg_khaiql_dbcleaner_v2//:go_default_library",
        "@in_gopkg_khaiql_dbcleaner_v2//engine:go_default_library",
        "@io_bazel_rules_go//proto/wkt:empty_go_proto",  # keep
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//credentials:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

filegroup(
    name = "go_srcs",
    srcs = glob(["*.go"]),
    visibility = ["//scheduler:__subpackages__"],
)
