load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "auth.go",
        "cancel_job.go",
        "cancel_task.go",
        "create_job.go",
        "env.go",
        "get_job.go",
        "get_node.go",
        "get_task.go",
        "handle_job_terminated.go",
        "handle_task_created.go",
        "iterate_tasks.go",
        "iterate_tasks_for_node.go",
        "list_cpu_models.go",
        "list_disk_models.go",
        "list_gpu_models.go",
        "list_jobs.go",
        "list_memory_models.go",
        "list_nodes.go",
        "list_tasks.go",
        "options.go",
        "server.go",
    ],
    data = [
        "//cert:cert",
    ],
    importpath = "github.com/mennanov/scalemate/scheduler/server",
    visibility = ["//visibility:public"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/events:go_default_library",
        "//shared/events_proto:go_default_library",
        "//shared/middleware:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//auth:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//logging/logrus:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//logging/logrus/ctxlogrus:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//recovery:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//tags:go_default_library",
        "@com_github_grpc_ecosystem_go_grpc_middleware//validator:go_default_library",
        "@com_github_jinzhu_gorm//:go_default_library",
        "@com_github_jinzhu_gorm//dialects/postgres:go_default_library",
        "@com_github_pkg_errors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_github_streadway_amqp//:go_default_library",
        "@io_bazel_rules_go//proto/wkt:empty_go_proto",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "cancel_job_test.go",
        "cancel_task_test.go",
        "create_job_test.go",
        "get_job_test.go",
        "get_node_test.go",
        "get_task_test.go",
        "handle_job_terminated_test.go",
        "handle_task_created_test.go",
        "iterate_tasks_for_node_test.go",
        "iterate_tasks_test.go",
        "list_cpu_models_test.go",
        "list_disk_models_test.go",
        "list_gpu_models_test.go",
        "list_jobs_test.go",
        "list_memory_models_test.go",
        "list_nodes_test.go",
        "list_tasks_test.go",
        "testsuite_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//scheduler/migrations:go_default_library",
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/events:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_jinzhu_gorm//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_github_streadway_amqp//:go_default_library",
        "@com_github_stretchr_testify//suite:go_default_library",
        "@in_gopkg_khaiql_dbcleaner_v2//:go_default_library",
        "@in_gopkg_khaiql_dbcleaner_v2//engine:go_default_library",
        "@in_gopkg_khaiql_dbcleaner_v2//logging:go_default_library",
        "@io_bazel_rules_go//proto/wkt:empty_go_proto",  # keep
        "@io_bazel_rules_go//proto/wkt:timestamp_go_proto",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//credentials:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

load("@com_github_atlassian_bazel_tools//gorevive:def.bzl", "go_revive_test")

go_revive_test(
    name = "go_lint",
    # Go source files to be linted.
    srcs = glob(["*.go"]),
    # Revive .toml config.
    config = "//:revive.toml",  # it can also be a regular Bazel label.
    formatter = "stylish",
    # The paths have to be relative to the workspace root.
    paths = [
        "./...",
    ],
)
