load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "container_created.go",
        "handlers.go",
    ],
    importpath = "github.com/mennanov/scalemate/scheduler/handlers",
    visibility = ["//visibility:public"],
    deps = [
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/events:go_default_library",
        "//shared/events_proto:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_jmoiron_sqlx//:go_default_library",
        "@com_github_pkg_errors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "container_created_test.go",
        "testsuite_test.go",
    ],
    data = [
        "//scheduler/migrations",
    ],
    embed = [":go_default_library"],
    deps = [
        "//scheduler/conf:go_default_library",
        "//scheduler/models:go_default_library",
        "//scheduler/scheduler_proto:go_default_library",
        "//shared/events:go_default_library",
        "//shared/events_proto:go_default_library",
        "//shared/testutils:go_default_library",
        "//shared/utils:go_default_library",
        "@com_github_golang_migrate_migrate//:go_default_library",
        "@com_github_golang_migrate_migrate//database/postgres:go_default_library",
        "@com_github_golang_migrate_migrate//source/file:go_default_library",
        "@com_github_google_uuid//:go_default_library",
        "@com_github_jmoiron_sqlx//:go_default_library",
        "@com_github_nats_io_go_nats_streaming//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_github_stretchr_testify//suite:go_default_library",
    ],
)

load("@com_github_atlassian_bazel_tools//gorevive:def.bzl", "go_revive_test")

go_revive_test(
    name = "go_lint",
    # Go source files to be linted.
    srcs = glob(["*.go"]),
    # Revive .toml config.
    config = "//:revive.toml",  # it can also be a regular Bazel label.
    formatter = "stylish",
    # The paths have to be relative to the workspace root.
    paths = [
        "./...",
    ],
)
