load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("@bazel_gomock//:gomock.bzl", "gomock")

go_library(
    name = "go_default_library",
    srcs = [
        "controllers.go",
        "views.go",
    ],
    importpath = "github.com/mennanov/scalemate/client/accounts",
    visibility = ["//visibility:public"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/client:go_default_library",
        "@com_github_pkg_errors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

gomock(
    name = "accounts_proto_mock",
    out = "accounts_proto_mock_test.go",
    interfaces = ["AccountsClient"],
    library = "//accounts/accounts_proto:accounts_go_proto",
    package = "accounts_test",
)

go_test(
    name = "go_default_test",
    srcs = [
        "accounts_proto_mock_test.go",
        "controllers_test.go",
        "views_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//accounts/accounts_proto:go_default_library",
        "//shared/auth:go_default_library",
        "//shared/testutils:go_default_library",
        "@com_github_golang_mock//gomock:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_github_sirupsen_logrus//hooks/test:go_default_library",
        "@com_github_stretchr_testify//assert:go_default_library",
        "@com_github_stretchr_testify//require:go_default_library",
        "@io_bazel_rules_go//proto/wkt:empty_go_proto",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

load("@com_github_atlassian_bazel_tools//gorevive:def.bzl", "go_revive_test")

go_revive_test(
    name = "go_lint",
    # Go source files to be linted.
    srcs = glob(["*.go"]),
    # Revive .toml config.
    config = "//:revive.toml",  # it can also be a regular Bazel label.
    formatter = "stylish",
    # The paths have to be relative to the workspace root.
    paths = [
        "./...",
    ],
)
