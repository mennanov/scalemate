syntax = "proto3";

package accounts.accounts_proto;
option go_package = "github.com/mennanov/scalemate/accounts/accounts_proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service Accounts {
    // Register registers a new User account. This method should be used to create a new User account.
    rpc Register (RegisterRequest) returns (User) {
    }
    // Get gets a User account details.
    rpc Get (UserLookupRequest) returns (User) {
    }
    // ChangePassword changes the User's password. Authentication is required.
    rpc ChangePassword (ChangePasswordRequest) returns (google.protobuf.Empty) {
    }
    // PasswordAuth authenticates a User (client) with username and password.
    rpc PasswordAuth (PasswordAuthRequest) returns (AuthTokens) {
    }
    // TokenAuth should be used to obtain fresh AuthTokens using an existing valid JWT refresh token.
    rpc TokenAuth (TokenAuthRequest) returns (AuthTokens) {
    }
}

message User {
    // Readonly.
    uint32 id = 1;
    // Unique username.
    string username = 2;
    // Unique email.
    string email = 3;
    // Indicates if the User is banned.
    bool banned = 4;
    // Datetime fields are ignored in CRUD operations requests.
    google.protobuf.Timestamp created_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated_at = 6 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp password_changed_at = 7 [(gogoproto.stdtime) = true];
}

message UserLookupRequest {
    // Performs a lookup by any of the given fields.
    oneof request {
        uint32 id = 1;
        string username = 2;
        string email = 3;
    }
}

message ChangePasswordRequest {
    // Username must match the username in JWT for this request.
    string username = 1;
    string password = 2;
}

message RegisterRequest {
    string username = 1;
    string email = 2;
    string password = 3;
}

message PasswordAuthRequest {
    message UserAuthRequest {
        string username = 1;
        string password = 2;
    }

    message NodeAuthRequest {
        string username = 1;
        string password = 2;
        string node_name = 3;
        bytes node_fingerprint = 4;
    }

    oneof request {
        UserAuthRequest user_auth = 1;
        NodeAuthRequest node_auth = 2;
    }
}

message TokenAuthRequest {
    string refresh_token = 2;
}

message AuthTokens {
    string access_token = 1;
    string refresh_token = 2;
}
